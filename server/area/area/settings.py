"""
Django settings for area project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from os import environ, path
from datetime import timedelta
from rest_framework.settings import api_settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-x*)m#c4ver+vx*e@%+u5(%k4sn6bctk=$^5h*yw^(47i@1w*wr'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
]
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'knox',
    'corsheaders',
    'ogoogle.apps.OgoogleConfig',
    'oauth.apps.OauthConfig',
    'accounts.apps.AccountsConfig',
    'services.apps.ServicesConfig',
    'about.apps.AboutConfig',
    'weather.apps.WeatherConfig',
    'timer.apps.TimerConfig',
    'oauth2_provider',
    'django_crontab',
    'spotify.apps.SpotifyConfig',
    'reddit.apps.RedditConfig',
    'github.apps.GithubConfig',
    'tumblr.apps.TumblrConfig',
    'drf_yasg',
]

REST_KNOX = {
  'SECURE_HASH_ALGORITHM': 'cryptography.hazmat.primitives.hashes.SHA512',
  'AUTH_TOKEN_CHARACTER_LENGTH': 64,
  'TOKEN_TTL': timedelta(hours=10),
  'USER_SERIALIZER': 'knox.serializers.UserSerializer',
  'TOKEN_LIMIT_PER_USER': None,
  'AUTO_REFRESH': False,
  'AUTH_HEADER_PREFIX': 'Bearer',
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'knox.auth.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES' : [
        'rest_framework.permissions.IsAuthenticated'
    ]
}

CRONTAB_LOCK_JOBS = False

CRONJOBS = [
    ('*/1 * * * *', 'weather.cron.update_weather_info', '>> ' + path.join(BASE_DIR,'log/debug.log' + ' 2>&1 ')),
    ('*/1 * * * *', 'spotify.cron.update_spotify_playlists', '>> ' + path.join(BASE_DIR,'log/debug.log' + ' 2>&1 ')),
    ('*/1 * * * *', 'timer.cron.update_timers', '>> ' + path.join(BASE_DIR,'log/debug.log' + ' 2>&1 ')),
    ('*/1 * * * *', 'github.cron.update_repositories', '>> ' + path.join(BASE_DIR,'log/debug.log' + ' 2>&1 ')),
    ('*/1 * * * *', 'reddit.cron.update_subreddits', '>> ' + path.join(BASE_DIR,'log/debug.log' + ' 2>&1 ')),
    ('*/1 * * * *', 'ogoogle.cron.update_mail', '>> ' + path.join(BASE_DIR,'log/debug.log' + ' 2>&1 ')),
]

LOGIN_URL='/admin/login/'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = ('http://localhost:8081', 'http://localhost:19006',)

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8081',
    'http://127.0.0.1:8081',
    'http://localhost:19006',
    'http://127.0.0.1:19006',
]

CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8081',
    'http://localhost:8081',
    'http://localhost:19006',
    'http://127.0.0.1:19006',
]

ROOT_URLCONF = 'area.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'area.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.mysql',
#        'NAME': environ.get('DB_NAME'),
#        'USER': environ.get('DB_USER'),
#        'PASSWORD': environ.get('DB_PASSWORD'),
#        'HOST': environ.get('DB_HOST'),
#        'PORT': environ.get('DB_PORT'),
#    }
#}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "db_area",
        'USER': "user_area",
        'PASSWORD': "area",
        'HOST': "localhost", # localhost for local env and db for docker env
        'PORT': "3306",
        'OPTIONS': {'charset': 'utf8mb4'},
    }
}

CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True

SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = True


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
